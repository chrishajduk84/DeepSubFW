
AttitudeController2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020d0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080022b4  080022b4  000122b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d4  080022d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022d4  080022d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022d4  080022d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080022e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080022e8  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ed6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014cc  00000000  00000000  00027f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  000293d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  00029d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000106b5  00000000  00000000  0002a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092e2  00000000  00000000  0003ac55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067e37  00000000  00000000  00043f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000abd6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002614  00000000  00000000  000abdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800229c 	.word	0x0800229c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	0800229c 	.word	0x0800229c

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000226:	b099      	sub	sp, #100	; 0x64
 8000228:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fbc3 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f8c5 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 fa0d 	bl	8000650 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000236:	f000 f8fd 	bl	8000434 <MX_TIM2_Init>
  MX_TIM4_Init();
 800023a:	f000 f971 	bl	8000520 <MX_TIM4_Init>
  //HAL_TIM_Base_Start(&htim2);

  while (1){
  // @8MHz Fclk - 3x prescale - 58666 = 22ms, 2666 = 1ms, 5332 = 2ms
  // Servo range: 1066 (1ms) - 6665(2.5ms)
  uint16_t SERVO_HIGH = 6900;//6665;
 800023e:	f641 23f4 	movw	r3, #6900	; 0x1af4
 8000242:	80fb      	strh	r3, [r7, #6]
  uint16_t SERVO_LOW = 1066;
 8000244:	f240 432a 	movw	r3, #1066	; 0x42a
 8000248:	80bb      	strh	r3, [r7, #4]
  for (uint16_t i = SERVO_LOW; i < SERVO_HIGH; i){
 800024a:	88bb      	ldrh	r3, [r7, #4]
 800024c:	82fb      	strh	r3, [r7, #22]
 800024e:	e051      	b.n	80002f4 <main+0xd0>
	  setPWM(htim2, TIM_CHANNEL_2, (uint16_t)58666, i);
 8000250:	8afb      	ldrh	r3, [r7, #22]
 8000252:	4e57      	ldr	r6, [pc, #348]	; (80003b0 <main+0x18c>)
 8000254:	9310      	str	r3, [sp, #64]	; 0x40
 8000256:	f24e 532a 	movw	r3, #58666	; 0xe52a
 800025a:	930f      	str	r3, [sp, #60]	; 0x3c
 800025c:	2304      	movs	r3, #4
 800025e:	930e      	str	r3, [sp, #56]	; 0x38
 8000260:	466d      	mov	r5, sp
 8000262:	f106 0410 	add.w	r4, r6, #16
 8000266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800026a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800026c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800026e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000276:	e885 0003 	stmia.w	r5, {r0, r1}
 800027a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800027e:	f000 fa5d 	bl	800073c <setPWM>
	  for (int j = 0; j < 2001; j++){
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
 8000286:	e009      	b.n	800029c <main+0x78>
		  if (j == 2000){
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800028e:	d102      	bne.n	8000296 <main+0x72>
			  i++;
 8000290:	8afb      	ldrh	r3, [r7, #22]
 8000292:	3301      	adds	r3, #1
 8000294:	82fb      	strh	r3, [r7, #22]
	  for (int j = 0; j < 2001; j++){
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	3301      	adds	r3, #1
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002a2:	ddf1      	ble.n	8000288 <main+0x64>
		  }
	  }
	  if (i % 1000 == 0)
 80002a4:	8afb      	ldrh	r3, [r7, #22]
 80002a6:	4a43      	ldr	r2, [pc, #268]	; (80003b4 <main+0x190>)
 80002a8:	fba2 1203 	umull	r1, r2, r2, r3
 80002ac:	0992      	lsrs	r2, r2, #6
 80002ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002b2:	fb01 f202 	mul.w	r2, r1, r2
 80002b6:	1a9b      	subs	r3, r3, r2
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d105      	bne.n	80002ca <main+0xa6>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2101      	movs	r1, #1
 80002c2:	483d      	ldr	r0, [pc, #244]	; (80003b8 <main+0x194>)
 80002c4:	f000 fe50 	bl	8000f68 <HAL_GPIO_WritePin>
 80002c8:	e014      	b.n	80002f4 <main+0xd0>
	  }
	  else if ((i+500)% 1000 == 0)
 80002ca:	8afb      	ldrh	r3, [r7, #22]
 80002cc:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80002d0:	4b38      	ldr	r3, [pc, #224]	; (80003b4 <main+0x190>)
 80002d2:	fb83 1302 	smull	r1, r3, r3, r2
 80002d6:	1199      	asrs	r1, r3, #6
 80002d8:	17d3      	asrs	r3, r2, #31
 80002da:	1acb      	subs	r3, r1, r3
 80002dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002e0:	fb01 f303 	mul.w	r3, r1, r3
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d104      	bne.n	80002f4 <main+0xd0>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2101      	movs	r1, #1
 80002ee:	4832      	ldr	r0, [pc, #200]	; (80003b8 <main+0x194>)
 80002f0:	f000 fe3a 	bl	8000f68 <HAL_GPIO_WritePin>
  for (uint16_t i = SERVO_LOW; i < SERVO_HIGH; i){
 80002f4:	8afa      	ldrh	r2, [r7, #22]
 80002f6:	88fb      	ldrh	r3, [r7, #6]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d3a9      	bcc.n	8000250 <main+0x2c>
	  }
  }
  for (uint16_t i = SERVO_HIGH; i > SERVO_LOW; i){
 80002fc:	88fb      	ldrh	r3, [r7, #6]
 80002fe:	81fb      	strh	r3, [r7, #14]
 8000300:	e051      	b.n	80003a6 <main+0x182>
	  setPWM(htim2, TIM_CHANNEL_2, (uint16_t)58666, i);
 8000302:	89fb      	ldrh	r3, [r7, #14]
 8000304:	4e2a      	ldr	r6, [pc, #168]	; (80003b0 <main+0x18c>)
 8000306:	9310      	str	r3, [sp, #64]	; 0x40
 8000308:	f24e 532a 	movw	r3, #58666	; 0xe52a
 800030c:	930f      	str	r3, [sp, #60]	; 0x3c
 800030e:	2304      	movs	r3, #4
 8000310:	930e      	str	r3, [sp, #56]	; 0x38
 8000312:	466d      	mov	r5, sp
 8000314:	f106 0410 	add.w	r4, r6, #16
 8000318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800031a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800031c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800031e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000324:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000328:	e885 0003 	stmia.w	r5, {r0, r1}
 800032c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000330:	f000 fa04 	bl	800073c <setPWM>
	  for (int j = 0; j < 2001; j++){
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]
 8000338:	e009      	b.n	800034e <main+0x12a>
		  if (j == 2000){
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000340:	d102      	bne.n	8000348 <main+0x124>
			  i--;
 8000342:	89fb      	ldrh	r3, [r7, #14]
 8000344:	3b01      	subs	r3, #1
 8000346:	81fb      	strh	r3, [r7, #14]
	  for (int j = 0; j < 2001; j++){
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	3301      	adds	r3, #1
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000354:	ddf1      	ble.n	800033a <main+0x116>
		  }
	  }
	  if (i % 1000 == 0)
 8000356:	89fb      	ldrh	r3, [r7, #14]
 8000358:	4a16      	ldr	r2, [pc, #88]	; (80003b4 <main+0x190>)
 800035a:	fba2 1203 	umull	r1, r2, r2, r3
 800035e:	0992      	lsrs	r2, r2, #6
 8000360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000364:	fb01 f202 	mul.w	r2, r1, r2
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	b29b      	uxth	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	d105      	bne.n	800037c <main+0x158>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2101      	movs	r1, #1
 8000374:	4810      	ldr	r0, [pc, #64]	; (80003b8 <main+0x194>)
 8000376:	f000 fdf7 	bl	8000f68 <HAL_GPIO_WritePin>
 800037a:	e014      	b.n	80003a6 <main+0x182>
	  }
	  else if ((i+500)% 1000 == 0)
 800037c:	89fb      	ldrh	r3, [r7, #14]
 800037e:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <main+0x190>)
 8000384:	fb83 1302 	smull	r1, r3, r3, r2
 8000388:	1199      	asrs	r1, r3, #6
 800038a:	17d3      	asrs	r3, r2, #31
 800038c:	1acb      	subs	r3, r1, r3
 800038e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000392:	fb01 f303 	mul.w	r3, r1, r3
 8000396:	1ad3      	subs	r3, r2, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d104      	bne.n	80003a6 <main+0x182>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2101      	movs	r1, #1
 80003a0:	4805      	ldr	r0, [pc, #20]	; (80003b8 <main+0x194>)
 80003a2:	f000 fde1 	bl	8000f68 <HAL_GPIO_WritePin>
  for (uint16_t i = SERVO_HIGH; i > SERVO_LOW; i){
 80003a6:	89fa      	ldrh	r2, [r7, #14]
 80003a8:	88bb      	ldrh	r3, [r7, #4]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d8a9      	bhi.n	8000302 <main+0xde>
  while (1){
 80003ae:	e746      	b.n	800023e <main+0x1a>
 80003b0:	20000070 	.word	0x20000070
 80003b4:	10624dd3 	.word	0x10624dd3
 80003b8:	40011c00 	.word	0x40011c00

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b090      	sub	sp, #64	; 0x40
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0318 	add.w	r3, r7, #24
 80003c6:	2228      	movs	r2, #40	; 0x28
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 ff5e 	bl	800228c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003de:	2302      	movs	r3, #2
 80003e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e2:	2301      	movs	r3, #1
 80003e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e6:	2310      	movs	r3, #16
 80003e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	f107 0318 	add.w	r3, r7, #24
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fdd0 	bl	8000f98 <HAL_RCC_OscConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003fe:	f000 f9cd 	bl	800079c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	230f      	movs	r3, #15
 8000404:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000406:	2300      	movs	r3, #0
 8000408:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f001 f83c 	bl	8001498 <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000426:	f000 f9b9 	bl	800079c <Error_Handler>
  }
}
 800042a:	bf00      	nop
 800042c:	3740      	adds	r7, #64	; 0x40
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08e      	sub	sp, #56	; 0x38
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000448:	f107 0320 	add.w	r3, r7, #32
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
 8000460:	615a      	str	r2, [r3, #20]
 8000462:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000464:	4b2d      	ldr	r3, [pc, #180]	; (800051c <MX_TIM2_Init+0xe8>)
 8000466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800046a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 800046c:	4b2b      	ldr	r3, [pc, #172]	; (800051c <MX_TIM2_Init+0xe8>)
 800046e:	2202      	movs	r2, #2
 8000470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b2a      	ldr	r3, [pc, #168]	; (800051c <MX_TIM2_Init+0xe8>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000478:	4b28      	ldr	r3, [pc, #160]	; (800051c <MX_TIM2_Init+0xe8>)
 800047a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800047e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b26      	ldr	r3, [pc, #152]	; (800051c <MX_TIM2_Init+0xe8>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000486:	4b25      	ldr	r3, [pc, #148]	; (800051c <MX_TIM2_Init+0xe8>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800048c:	4823      	ldr	r0, [pc, #140]	; (800051c <MX_TIM2_Init+0xe8>)
 800048e:	f001 f96b 	bl	8001768 <HAL_TIM_Base_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000498:	f000 f980 	bl	800079c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a6:	4619      	mov	r1, r3
 80004a8:	481c      	ldr	r0, [pc, #112]	; (800051c <MX_TIM2_Init+0xe8>)
 80004aa:	f001 fb9f 	bl	8001bec <HAL_TIM_ConfigClockSource>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80004b4:	f000 f972 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004b8:	4818      	ldr	r0, [pc, #96]	; (800051c <MX_TIM2_Init+0xe8>)
 80004ba:	f001 f9a4 	bl	8001806 <HAL_TIM_PWM_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80004c4:	f000 f96a 	bl	800079c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d0:	f107 0320 	add.w	r3, r7, #32
 80004d4:	4619      	mov	r1, r3
 80004d6:	4811      	ldr	r0, [pc, #68]	; (800051c <MX_TIM2_Init+0xe8>)
 80004d8:	f001 fe56 	bl	8002188 <HAL_TIMEx_MasterConfigSynchronization>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80004e2:	f000 f95b 	bl	800079c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e6:	2360      	movs	r3, #96	; 0x60
 80004e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2204      	movs	r2, #4
 80004fa:	4619      	mov	r1, r3
 80004fc:	4807      	ldr	r0, [pc, #28]	; (800051c <MX_TIM2_Init+0xe8>)
 80004fe:	f001 fab7 	bl	8001a70 <HAL_TIM_PWM_ConfigChannel>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000508:	f000 f948 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <MX_TIM2_Init+0xe8>)
 800050e:	f000 f9a9 	bl	8000864 <HAL_TIM_MspPostInit>

}
 8000512:	bf00      	nop
 8000514:	3738      	adds	r7, #56	; 0x38
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000070 	.word	0x20000070

08000520 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08e      	sub	sp, #56	; 0x38
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000534:	f107 0320 	add.w	r3, r7, #32
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
 800054c:	615a      	str	r2, [r3, #20]
 800054e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000550:	4b3d      	ldr	r3, [pc, #244]	; (8000648 <MX_TIM4_Init+0x128>)
 8000552:	4a3e      	ldr	r2, [pc, #248]	; (800064c <MX_TIM4_Init+0x12c>)
 8000554:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000556:	4b3c      	ldr	r3, [pc, #240]	; (8000648 <MX_TIM4_Init+0x128>)
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055c:	4b3a      	ldr	r3, [pc, #232]	; (8000648 <MX_TIM4_Init+0x128>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000562:	4b39      	ldr	r3, [pc, #228]	; (8000648 <MX_TIM4_Init+0x128>)
 8000564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000568:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056a:	4b37      	ldr	r3, [pc, #220]	; (8000648 <MX_TIM4_Init+0x128>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000570:	4b35      	ldr	r3, [pc, #212]	; (8000648 <MX_TIM4_Init+0x128>)
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000576:	4834      	ldr	r0, [pc, #208]	; (8000648 <MX_TIM4_Init+0x128>)
 8000578:	f001 f8f6 	bl	8001768 <HAL_TIM_Base_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000582:	f000 f90b 	bl	800079c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800058c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000590:	4619      	mov	r1, r3
 8000592:	482d      	ldr	r0, [pc, #180]	; (8000648 <MX_TIM4_Init+0x128>)
 8000594:	f001 fb2a 	bl	8001bec <HAL_TIM_ConfigClockSource>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800059e:	f000 f8fd 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80005a2:	4829      	ldr	r0, [pc, #164]	; (8000648 <MX_TIM4_Init+0x128>)
 80005a4:	f001 f92f 	bl	8001806 <HAL_TIM_PWM_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80005ae:	f000 f8f5 	bl	800079c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	4619      	mov	r1, r3
 80005c0:	4821      	ldr	r0, [pc, #132]	; (8000648 <MX_TIM4_Init+0x128>)
 80005c2:	f001 fde1 	bl	8002188 <HAL_TIMEx_MasterConfigSynchronization>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80005cc:	f000 f8e6 	bl	800079c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d0:	2360      	movs	r3, #96	; 0x60
 80005d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	4619      	mov	r1, r3
 80005e6:	4818      	ldr	r0, [pc, #96]	; (8000648 <MX_TIM4_Init+0x128>)
 80005e8:	f001 fa42 	bl	8001a70 <HAL_TIM_PWM_ConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80005f2:	f000 f8d3 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2204      	movs	r2, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4812      	ldr	r0, [pc, #72]	; (8000648 <MX_TIM4_Init+0x128>)
 80005fe:	f001 fa37 	bl	8001a70 <HAL_TIM_PWM_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000608:	f000 f8c8 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2208      	movs	r2, #8
 8000610:	4619      	mov	r1, r3
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <MX_TIM4_Init+0x128>)
 8000614:	f001 fa2c 	bl	8001a70 <HAL_TIM_PWM_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800061e:	f000 f8bd 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	220c      	movs	r2, #12
 8000626:	4619      	mov	r1, r3
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <MX_TIM4_Init+0x128>)
 800062a:	f001 fa21 	bl	8001a70 <HAL_TIM_PWM_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000634:	f000 f8b2 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <MX_TIM4_Init+0x128>)
 800063a:	f000 f913 	bl	8000864 <HAL_TIM_MspPostInit>

}
 800063e:	bf00      	nop
 8000640:	3738      	adds	r7, #56	; 0x38
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028
 800064c:	40000800 	.word	0x40000800

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000664:	4b31      	ldr	r3, [pc, #196]	; (800072c <MX_GPIO_Init+0xdc>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a30      	ldr	r2, [pc, #192]	; (800072c <MX_GPIO_Init+0xdc>)
 800066a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <MX_GPIO_Init+0xdc>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <MX_GPIO_Init+0xdc>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a2a      	ldr	r2, [pc, #168]	; (800072c <MX_GPIO_Init+0xdc>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <MX_GPIO_Init+0xdc>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <MX_GPIO_Init+0xdc>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a24      	ldr	r2, [pc, #144]	; (800072c <MX_GPIO_Init+0xdc>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_GPIO_Init+0xdc>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2101      	movs	r1, #1
 80006b0:	481f      	ldr	r0, [pc, #124]	; (8000730 <MX_GPIO_Init+0xe0>)
 80006b2:	f000 fc59 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b6:	2301      	movs	r3, #1
 80006b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	4818      	ldr	r0, [pc, #96]	; (8000730 <MX_GPIO_Init+0xe0>)
 80006ce:	f000 fab7 	bl	8000c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN 7 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2102      	movs	r1, #2
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <MX_GPIO_Init+0xe4>)
 80006d8:	f000 fc46 	bl	8000f68 <HAL_GPIO_WritePin>
  /*Configure GPIO pin : A1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80006e8:	2302      	movs	r3, #2
 80006ea:	61fb      	str	r3, [r7, #28]
  //GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4619      	mov	r1, r3
 80006f2:	4810      	ldr	r0, [pc, #64]	; (8000734 <MX_GPIO_Init+0xe4>)
 80006f4:	f000 faa4 	bl	8000c40 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fe:	480e      	ldr	r0, [pc, #56]	; (8000738 <MX_GPIO_Init+0xe8>)
 8000700:	f000 fc32 	bl	8000f68 <HAL_GPIO_WritePin>
  /*Configure GPIO pin : B9_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000712:	2302      	movs	r3, #2
 8000714:	61fb      	str	r3, [r7, #28]
  //GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <MX_GPIO_Init+0xe8>)
 800071e:	f000 fa8f 	bl	8000c40 <HAL_GPIO_Init>
  /* USER CODE END 7 */

}
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000
 8000730:	40011c00 	.word	0x40011c00
 8000734:	40010800 	.word	0x40010800
 8000738:	40010c00 	.word	0x40010c00

0800073c <setPWM>:

/* USER CODE BEGIN 4 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
uint16_t pulse)
{
 800073c:	b084      	sub	sp, #16
 800073e:	b580      	push	{r7, lr}
 8000740:	b088      	sub	sp, #32
 8000742:	af00      	add	r7, sp, #0
 8000744:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000748:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 800074c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800074e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000752:	f001 f947 	bl	80019e4 <HAL_TIM_PWM_Stop>
 TIM_OC_InitTypeDef sConfigOC;
 timer.Init.Period = period; // set the period duration
 8000756:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 800075c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000760:	f001 f851 	bl	8001806 <HAL_TIM_PWM_Init>
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000764:	2360      	movs	r3, #96	; 0x60
 8000766:	607b      	str	r3, [r7, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 8000768:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800076c:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800077a:	4619      	mov	r1, r3
 800077c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000780:	f001 f976 	bl	8001a70 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8000784:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000786:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800078a:	f001 f895 	bl	80018b8 <HAL_TIM_PWM_Start>
}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000798:	b004      	add	sp, #16
 800079a:	4770      	bx	lr

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <HAL_MspInit+0x54>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <HAL_MspInit+0x54>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_MspInit+0x54>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_MspInit+0x54>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <HAL_MspInit+0x54>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_MspInit+0x54>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_MspInit+0x58>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_MspInit+0x58>)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010000 	.word	0x40010000

08000804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000814:	d10c      	bne.n	8000830 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <HAL_TIM_Base_MspInit+0x58>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <HAL_TIM_Base_MspInit+0x58>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_TIM_Base_MspInit+0x58>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800082e:	e010      	b.n	8000852 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <HAL_TIM_Base_MspInit+0x5c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d10b      	bne.n	8000852 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_TIM_Base_MspInit+0x58>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_TIM_Base_MspInit+0x58>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_TIM_Base_MspInit+0x58>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	40021000 	.word	0x40021000
 8000860:	40000800 	.word	0x40000800

08000864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000882:	d118      	bne.n	80008b6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <HAL_TIM_MspPostInit+0x98>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <HAL_TIM_MspPostInit+0x98>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <HAL_TIM_MspPostInit+0x98>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	4814      	ldr	r0, [pc, #80]	; (8000900 <HAL_TIM_MspPostInit+0x9c>)
 80008b0:	f000 f9c6 	bl	8000c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80008b4:	e01d      	b.n	80008f2 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <HAL_TIM_MspPostInit+0xa0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d118      	bne.n	80008f2 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_TIM_MspPostInit+0x98>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <HAL_TIM_MspPostInit+0x98>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_TIM_MspPostInit+0x98>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80008d8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80008dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <HAL_TIM_MspPostInit+0xa4>)
 80008ee:	f000 f9a7 	bl	8000c40 <HAL_GPIO_Init>
}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010800 	.word	0x40010800
 8000904:	40000800 	.word	0x40000800
 8000908:	40010c00 	.word	0x40010c00

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f000 f875 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}

0800095a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
	...

08000968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	; (80009ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800098e:	f7ff ffe4 	bl	800095a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f001 fc57 	bl	8002244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000996:	f7ff fc45 	bl	8000224 <main>
  bx lr
 800099a:	4770      	bx	lr
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a4:	080022dc 	.word	0x080022dc
  ldr r2, =_sbss
 80009a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ac:	200000bc 	.word	0x200000bc

080009b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_Init+0x28>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_Init+0x28>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f907 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 f808 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff feea 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x54>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x58>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f911 	bl	8000c26 <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00e      	b.n	8000a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d80a      	bhi.n	8000a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f000 f8e7 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_InitTick+0x5c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x1c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x20>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <HAL_IncTick+0x20>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	200000b8 	.word	0x200000b8

08000a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <HAL_GetTick+0x10>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	200000b8 	.word	0x200000b8

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff90 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff49 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff5e 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff90 	bl	8000b30 <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5f 	bl	8000adc <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffb0 	bl	8000b94 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b08b      	sub	sp, #44	; 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e179      	b.n	8000f48 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c54:	2201      	movs	r2, #1
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f040 8168 	bne.w	8000f42 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	4aa0      	ldr	r2, [pc, #640]	; (8000ef8 <HAL_GPIO_Init+0x2b8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d05e      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c7c:	4a9e      	ldr	r2, [pc, #632]	; (8000ef8 <HAL_GPIO_Init+0x2b8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d875      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c82:	4a9e      	ldr	r2, [pc, #632]	; (8000efc <HAL_GPIO_Init+0x2bc>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d058      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c88:	4a9c      	ldr	r2, [pc, #624]	; (8000efc <HAL_GPIO_Init+0x2bc>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d86f      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c8e:	4a9c      	ldr	r2, [pc, #624]	; (8000f00 <HAL_GPIO_Init+0x2c0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d052      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c94:	4a9a      	ldr	r2, [pc, #616]	; (8000f00 <HAL_GPIO_Init+0x2c0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d869      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c9a:	4a9a      	ldr	r2, [pc, #616]	; (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d04c      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000ca0:	4a98      	ldr	r2, [pc, #608]	; (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d863      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000ca6:	4a98      	ldr	r2, [pc, #608]	; (8000f08 <HAL_GPIO_Init+0x2c8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d046      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000cac:	4a96      	ldr	r2, [pc, #600]	; (8000f08 <HAL_GPIO_Init+0x2c8>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d85d      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000cb2:	2b12      	cmp	r3, #18
 8000cb4:	d82a      	bhi.n	8000d0c <HAL_GPIO_Init+0xcc>
 8000cb6:	2b12      	cmp	r3, #18
 8000cb8:	d859      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000cba:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <HAL_GPIO_Init+0x80>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000d3b 	.word	0x08000d3b
 8000cc4:	08000d15 	.word	0x08000d15
 8000cc8:	08000d27 	.word	0x08000d27
 8000ccc:	08000d69 	.word	0x08000d69
 8000cd0:	08000d6f 	.word	0x08000d6f
 8000cd4:	08000d6f 	.word	0x08000d6f
 8000cd8:	08000d6f 	.word	0x08000d6f
 8000cdc:	08000d6f 	.word	0x08000d6f
 8000ce0:	08000d6f 	.word	0x08000d6f
 8000ce4:	08000d6f 	.word	0x08000d6f
 8000ce8:	08000d6f 	.word	0x08000d6f
 8000cec:	08000d6f 	.word	0x08000d6f
 8000cf0:	08000d6f 	.word	0x08000d6f
 8000cf4:	08000d6f 	.word	0x08000d6f
 8000cf8:	08000d6f 	.word	0x08000d6f
 8000cfc:	08000d6f 	.word	0x08000d6f
 8000d00:	08000d6f 	.word	0x08000d6f
 8000d04:	08000d1d 	.word	0x08000d1d
 8000d08:	08000d31 	.word	0x08000d31
 8000d0c:	4a7f      	ldr	r2, [pc, #508]	; (8000f0c <HAL_GPIO_Init+0x2cc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d12:	e02c      	b.n	8000d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	623b      	str	r3, [r7, #32]
          break;
 8000d1a:	e029      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	3304      	adds	r3, #4
 8000d22:	623b      	str	r3, [r7, #32]
          break;
 8000d24:	e024      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	623b      	str	r3, [r7, #32]
          break;
 8000d2e:	e01f      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	330c      	adds	r3, #12
 8000d36:	623b      	str	r3, [r7, #32]
          break;
 8000d38:	e01a      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d42:	2304      	movs	r3, #4
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e013      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d105      	bne.n	8000d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d50:	2308      	movs	r3, #8
 8000d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	611a      	str	r2, [r3, #16]
          break;
 8000d5a:	e009      	b.n	8000d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	615a      	str	r2, [r3, #20]
          break;
 8000d66:	e003      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e000      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          break;
 8000d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2bff      	cmp	r3, #255	; 0xff
 8000d74:	d801      	bhi.n	8000d7a <HAL_GPIO_Init+0x13a>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	e001      	b.n	8000d7e <HAL_GPIO_Init+0x13e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d802      	bhi.n	8000d8c <HAL_GPIO_Init+0x14c>
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	e002      	b.n	8000d92 <HAL_GPIO_Init+0x152>
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	3b08      	subs	r3, #8
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	210f      	movs	r1, #15
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	401a      	ands	r2, r3
 8000da4:	6a39      	ldr	r1, [r7, #32]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	431a      	orrs	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 80c1 	beq.w	8000f42 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc0:	4b53      	ldr	r3, [pc, #332]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a52      	ldr	r2, [pc, #328]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b50      	ldr	r3, [pc, #320]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dd8:	4a4e      	ldr	r2, [pc, #312]	; (8000f14 <HAL_GPIO_Init+0x2d4>)
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a46      	ldr	r2, [pc, #280]	; (8000f18 <HAL_GPIO_Init+0x2d8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d01f      	beq.n	8000e44 <HAL_GPIO_Init+0x204>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a45      	ldr	r2, [pc, #276]	; (8000f1c <HAL_GPIO_Init+0x2dc>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d019      	beq.n	8000e40 <HAL_GPIO_Init+0x200>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a44      	ldr	r2, [pc, #272]	; (8000f20 <HAL_GPIO_Init+0x2e0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d013      	beq.n	8000e3c <HAL_GPIO_Init+0x1fc>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a43      	ldr	r2, [pc, #268]	; (8000f24 <HAL_GPIO_Init+0x2e4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d00d      	beq.n	8000e38 <HAL_GPIO_Init+0x1f8>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a42      	ldr	r2, [pc, #264]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d007      	beq.n	8000e34 <HAL_GPIO_Init+0x1f4>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a41      	ldr	r2, [pc, #260]	; (8000f2c <HAL_GPIO_Init+0x2ec>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d101      	bne.n	8000e30 <HAL_GPIO_Init+0x1f0>
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	e00a      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e30:	2306      	movs	r3, #6
 8000e32:	e008      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e34:	2304      	movs	r3, #4
 8000e36:	e006      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e004      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e002      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <HAL_GPIO_Init+0x206>
 8000e44:	2300      	movs	r3, #0
 8000e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e48:	f002 0203 	and.w	r2, r2, #3
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e56:	492f      	ldr	r1, [pc, #188]	; (8000f14 <HAL_GPIO_Init+0x2d4>)
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d006      	beq.n	8000e7e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e70:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	492e      	ldr	r1, [pc, #184]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	600b      	str	r3, [r1, #0]
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	492a      	ldr	r1, [pc, #168]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d006      	beq.n	8000ea6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	4924      	ldr	r1, [pc, #144]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	4920      	ldr	r1, [pc, #128]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	491a      	ldr	r1, [pc, #104]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	608b      	str	r3, [r1, #8]
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4916      	ldr	r1, [pc, #88]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d025      	beq.n	8000f34 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	4910      	ldr	r1, [pc, #64]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	60cb      	str	r3, [r1, #12]
 8000ef4:	e025      	b.n	8000f42 <HAL_GPIO_Init+0x302>
 8000ef6:	bf00      	nop
 8000ef8:	10320000 	.word	0x10320000
 8000efc:	10310000 	.word	0x10310000
 8000f00:	10220000 	.word	0x10220000
 8000f04:	10210000 	.word	0x10210000
 8000f08:	10120000 	.word	0x10120000
 8000f0c:	10110000 	.word	0x10110000
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010000 	.word	0x40010000
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40011400 	.word	0x40011400
 8000f28:	40011800 	.word	0x40011800
 8000f2c:	40011c00 	.word	0x40011c00
 8000f30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_GPIO_Init+0x324>)
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	4909      	ldr	r1, [pc, #36]	; (8000f64 <HAL_GPIO_Init+0x324>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	3301      	adds	r3, #1
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f47f ae7e 	bne.w	8000c54 <HAL_GPIO_Init+0x14>
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	372c      	adds	r7, #44	; 0x2c
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	40010400 	.word	0x40010400

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f84:	e003      	b.n	8000f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	041a      	lsls	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	611a      	str	r2, [r3, #16]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e26c      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8087 	beq.w	80010c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb8:	4b92      	ldr	r3, [pc, #584]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d00c      	beq.n	8000fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fc4:	4b8f      	ldr	r3, [pc, #572]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d112      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x5e>
 8000fd0:	4b8c      	ldr	r3, [pc, #560]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fde:	4b89      	ldr	r3, [pc, #548]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d06c      	beq.n	80010c4 <HAL_RCC_OscConfig+0x12c>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d168      	bne.n	80010c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e246      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffe:	d106      	bne.n	800100e <HAL_RCC_OscConfig+0x76>
 8001000:	4b80      	ldr	r3, [pc, #512]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a7f      	ldr	r2, [pc, #508]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	e02e      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x98>
 8001016:	4b7b      	ldr	r3, [pc, #492]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a7a      	ldr	r2, [pc, #488]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800101c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b78      	ldr	r3, [pc, #480]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a77      	ldr	r2, [pc, #476]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e01d      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0xbc>
 800103a:	4b72      	ldr	r3, [pc, #456]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a71      	ldr	r2, [pc, #452]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b6f      	ldr	r3, [pc, #444]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a6e      	ldr	r2, [pc, #440]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 8001054:	4b6b      	ldr	r3, [pc, #428]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a6a      	ldr	r2, [pc, #424]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800105a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b68      	ldr	r3, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a67      	ldr	r2, [pc, #412]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d013      	beq.n	800109c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fcf6 	bl	8000a64 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fcf2 	bl	8000a64 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	; 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e1fa      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0xe4>
 800109a:	e014      	b.n	80010c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fce2 	bl	8000a64 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fcde 	bl	8000a64 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	; 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e1e6      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b6:	4b53      	ldr	r3, [pc, #332]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x10c>
 80010c2:	e000      	b.n	80010c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d063      	beq.n	800119a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d2:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010de:	4b49      	ldr	r3, [pc, #292]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d11c      	bne.n	8001124 <HAL_RCC_OscConfig+0x18c>
 80010ea:	4b46      	ldr	r3, [pc, #280]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d116      	bne.n	8001124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	4b43      	ldr	r3, [pc, #268]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <HAL_RCC_OscConfig+0x176>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e1ba      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110e:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4939      	ldr	r1, [pc, #228]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001122:	e03a      	b.n	800119a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d020      	beq.n	800116e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff fc97 	bl	8000a64 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff fc93 	bl	8000a64 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e19b      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f0      	beq.n	800113a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4927      	ldr	r1, [pc, #156]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
 800116c:	e015      	b.n	800119a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fc76 	bl	8000a64 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117c:	f7ff fc72 	bl	8000a64 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e17a      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d03a      	beq.n	800121c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d019      	beq.n	80011e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_RCC_OscConfig+0x274>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b4:	f7ff fc56 	bl	8000a64 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fc52 	bl	8000a64 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e15a      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 faa6 	bl	800172c <RCC_Delay>
 80011e0:	e01c      	b.n	800121c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_RCC_OscConfig+0x274>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e8:	f7ff fc3c 	bl	8000a64 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ee:	e00f      	b.n	8001210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc38 	bl	8000a64 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d908      	bls.n	8001210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e140      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	42420000 	.word	0x42420000
 800120c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001210:	4b9e      	ldr	r3, [pc, #632]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e9      	bne.n	80011f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80a6 	beq.w	8001376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122e:	4b97      	ldr	r3, [pc, #604]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10d      	bne.n	8001256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	4b94      	ldr	r3, [pc, #592]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a93      	ldr	r2, [pc, #588]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b91      	ldr	r3, [pc, #580]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001252:	2301      	movs	r3, #1
 8001254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001256:	4b8e      	ldr	r3, [pc, #568]	; (8001490 <HAL_RCC_OscConfig+0x4f8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d118      	bne.n	8001294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001262:	4b8b      	ldr	r3, [pc, #556]	; (8001490 <HAL_RCC_OscConfig+0x4f8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a8a      	ldr	r2, [pc, #552]	; (8001490 <HAL_RCC_OscConfig+0x4f8>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126e:	f7ff fbf9 	bl	8000a64 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001276:	f7ff fbf5 	bl	8000a64 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b64      	cmp	r3, #100	; 0x64
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e0fd      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001288:	4b81      	ldr	r3, [pc, #516]	; (8001490 <HAL_RCC_OscConfig+0x4f8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x312>
 800129c:	4b7b      	ldr	r3, [pc, #492]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4a7a      	ldr	r2, [pc, #488]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6213      	str	r3, [r2, #32]
 80012a8:	e02d      	b.n	8001306 <HAL_RCC_OscConfig+0x36e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x334>
 80012b2:	4b76      	ldr	r3, [pc, #472]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a75      	ldr	r2, [pc, #468]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6213      	str	r3, [r2, #32]
 80012be:	4b73      	ldr	r3, [pc, #460]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4a72      	ldr	r2, [pc, #456]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	f023 0304 	bic.w	r3, r3, #4
 80012c8:	6213      	str	r3, [r2, #32]
 80012ca:	e01c      	b.n	8001306 <HAL_RCC_OscConfig+0x36e>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x356>
 80012d4:	4b6d      	ldr	r3, [pc, #436]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4a6c      	ldr	r2, [pc, #432]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6213      	str	r3, [r2, #32]
 80012e0:	4b6a      	ldr	r3, [pc, #424]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4a69      	ldr	r2, [pc, #420]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6213      	str	r3, [r2, #32]
 80012ec:	e00b      	b.n	8001306 <HAL_RCC_OscConfig+0x36e>
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4a66      	ldr	r2, [pc, #408]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	6213      	str	r3, [r2, #32]
 80012fa:	4b64      	ldr	r3, [pc, #400]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a63      	ldr	r2, [pc, #396]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f023 0304 	bic.w	r3, r3, #4
 8001304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d015      	beq.n	800133a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fba9 	bl	8000a64 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff fba5 	bl	8000a64 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	; 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e0ab      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132c:	4b57      	ldr	r3, [pc, #348]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ee      	beq.n	8001316 <HAL_RCC_OscConfig+0x37e>
 8001338:	e014      	b.n	8001364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133a:	f7ff fb93 	bl	8000a64 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff fb8f 	bl	8000a64 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e095      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001358:	4b4c      	ldr	r3, [pc, #304]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ee      	bne.n	8001342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d105      	bne.n	8001376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136a:	4b48      	ldr	r3, [pc, #288]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a47      	ldr	r2, [pc, #284]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8081 	beq.w	8001482 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001380:	4b42      	ldr	r3, [pc, #264]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d061      	beq.n	8001450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d146      	bne.n	8001422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001394:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <HAL_RCC_OscConfig+0x4fc>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fb63 	bl	8000a64 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff fb5f 	bl	8000a64 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e067      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b4:	4b35      	ldr	r3, [pc, #212]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d108      	bne.n	80013dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	492d      	ldr	r1, [pc, #180]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a19      	ldr	r1, [r3, #32]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	430b      	orrs	r3, r1
 80013ee:	4927      	ldr	r1, [pc, #156]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_RCC_OscConfig+0x4fc>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb33 	bl	8000a64 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff fb2f 	bl	8000a64 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e037      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x46a>
 8001420:	e02f      	b.n	8001482 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <HAL_RCC_OscConfig+0x4fc>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb1c 	bl	8000a64 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fb18 	bl	8000a64 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e020      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x498>
 800144e:	e018      	b.n	8001482 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e013      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_OscConfig+0x4f4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	429a      	cmp	r2, r3
 800146e:	d106      	bne.n	800147e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147a:	429a      	cmp	r2, r3
 800147c:	d001      	beq.n	8001482 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021000 	.word	0x40021000
 8001490:	40007000 	.word	0x40007000
 8001494:	42420060 	.word	0x42420060

08001498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0d0      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014ac:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d910      	bls.n	80014dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b67      	ldr	r3, [pc, #412]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 0207 	bic.w	r2, r3, #7
 80014c2:	4965      	ldr	r1, [pc, #404]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0b8      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f4:	4b59      	ldr	r3, [pc, #356]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a58      	ldr	r2, [pc, #352]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a52      	ldr	r2, [pc, #328]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001518:	4b50      	ldr	r3, [pc, #320]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	494d      	ldr	r1, [pc, #308]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d040      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d115      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e07f      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e073      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	4b3d      	ldr	r3, [pc, #244]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e06b      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f023 0203 	bic.w	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4936      	ldr	r1, [pc, #216]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001588:	f7ff fa6c 	bl	8000a64 <HAL_GetTick>
 800158c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001590:	f7ff fa68 	bl	8000a64 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e053      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 020c 	and.w	r2, r3, #12
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d1eb      	bne.n	8001590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d210      	bcs.n	80015e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 0207 	bic.w	r2, r3, #7
 80015ce:	4922      	ldr	r1, [pc, #136]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e032      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4916      	ldr	r1, [pc, #88]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	490e      	ldr	r1, [pc, #56]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001626:	f000 f821 	bl	800166c <HAL_RCC_GetSysClockFreq>
 800162a:	4602      	mov	r2, r0
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	490a      	ldr	r1, [pc, #40]	; (8001660 <HAL_RCC_ClockConfig+0x1c8>)
 8001638:	5ccb      	ldrb	r3, [r1, r3]
 800163a:	fa22 f303 	lsr.w	r3, r2, r3
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <HAL_RCC_ClockConfig+0x1cc>)
 8001640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_ClockConfig+0x1d0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f9ca 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000
 800165c:	40021000 	.word	0x40021000
 8001660:	080022c4 	.word	0x080022c4
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004

0800166c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800166c:	b490      	push	{r4, r7}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001674:	1d3c      	adds	r4, r7, #4
 8001676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800167c:	f240 2301 	movw	r3, #513	; 0x201
 8001680:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d002      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x40>
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_GetSysClockFreq+0x46>
 80016aa:	e02d      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ae:	623b      	str	r3, [r7, #32]
      break;
 80016b0:	e02d      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	0c9b      	lsrs	r3, r3, #18
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016be:	4413      	add	r3, r2
 80016c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	0c5b      	lsrs	r3, r3, #17
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016de:	4413      	add	r3, r2
 80016e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ea:	fb02 f203 	mul.w	r2, r2, r3
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
 80016f6:	e004      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	623b      	str	r3, [r7, #32]
      break;
 8001706:	e002      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_RCC_GetSysClockFreq+0xb8>)
 800170a:	623b      	str	r3, [r7, #32]
      break;
 800170c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800170e:	6a3b      	ldr	r3, [r7, #32]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bc90      	pop	{r4, r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	080022b4 	.word	0x080022b4
 8001720:	40021000 	.word	0x40021000
 8001724:	007a1200 	.word	0x007a1200
 8001728:	003d0900 	.word	0x003d0900

0800172c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <RCC_Delay+0x34>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <RCC_Delay+0x38>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0a5b      	lsrs	r3, r3, #9
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001748:	bf00      	nop
  }
  while (Delay --);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	60fa      	str	r2, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f9      	bne.n	8001748 <RCC_Delay+0x1c>
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000000 	.word	0x20000000
 8001764:	10624dd3 	.word	0x10624dd3

08001768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e041      	b.n	80017fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff f838 	bl	8000804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3304      	adds	r3, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f000 fae4 	bl	8001d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e041      	b.n	800189c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d106      	bne.n	8001832 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f839 	bl	80018a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2202      	movs	r2, #2
 8001836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3304      	adds	r3, #4
 8001842:	4619      	mov	r1, r3
 8001844:	4610      	mov	r0, r2
 8001846:	f000 fa95 	bl	8001d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_TIM_PWM_Start+0x24>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	e022      	b.n	8001922 <HAL_TIM_PWM_Start+0x6a>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d109      	bne.n	80018f6 <HAL_TIM_PWM_Start+0x3e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	e015      	b.n	8001922 <HAL_TIM_PWM_Start+0x6a>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d109      	bne.n	8001910 <HAL_TIM_PWM_Start+0x58>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	e008      	b.n	8001922 <HAL_TIM_PWM_Start+0x6a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e051      	b.n	80019ce <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d104      	bne.n	800193a <HAL_TIM_PWM_Start+0x82>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001938:	e013      	b.n	8001962 <HAL_TIM_PWM_Start+0xaa>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2b04      	cmp	r3, #4
 800193e:	d104      	bne.n	800194a <HAL_TIM_PWM_Start+0x92>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001948:	e00b      	b.n	8001962 <HAL_TIM_PWM_Start+0xaa>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b08      	cmp	r3, #8
 800194e:	d104      	bne.n	800195a <HAL_TIM_PWM_Start+0xa2>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001958:	e003      	b.n	8001962 <HAL_TIM_PWM_Start+0xaa>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2202      	movs	r2, #2
 800195e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2201      	movs	r2, #1
 8001968:	6839      	ldr	r1, [r7, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fbe7 	bl	800213e <TIM_CCxChannelCmd>
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001978:	d00e      	beq.n	8001998 <HAL_TIM_PWM_Start+0xe0>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_TIM_PWM_Start+0x120>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d009      	beq.n	8001998 <HAL_TIM_PWM_Start+0xe0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <HAL_TIM_PWM_Start+0x124>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d004      	beq.n	8001998 <HAL_TIM_PWM_Start+0xe0>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <HAL_TIM_PWM_Start+0x128>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d111      	bne.n	80019bc <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d010      	beq.n	80019cc <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ba:	e007      	b.n	80019cc <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40000400 	.word	0x40000400
 80019dc:	40000800 	.word	0x40000800
 80019e0:	40000c00 	.word	0x40000c00

080019e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fba1 	bl	800213e <TIM_CCxChannelCmd>
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a1a      	ldr	r2, [r3, #32]
 8001a02:	f241 1311 	movw	r3, #4369	; 0x1111
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10f      	bne.n	8001a2c <HAL_TIM_PWM_Stop+0x48>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6a1a      	ldr	r2, [r3, #32]
 8001a12:	f240 4344 	movw	r3, #1092	; 0x444
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d107      	bne.n	8001a2c <HAL_TIM_PWM_Stop+0x48>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d104      	bne.n	8001a3c <HAL_TIM_PWM_Stop+0x58>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a3a:	e013      	b.n	8001a64 <HAL_TIM_PWM_Stop+0x80>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d104      	bne.n	8001a4c <HAL_TIM_PWM_Stop+0x68>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a4a:	e00b      	b.n	8001a64 <HAL_TIM_PWM_Stop+0x80>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d104      	bne.n	8001a5c <HAL_TIM_PWM_Stop+0x78>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a5a:	e003      	b.n	8001a64 <HAL_TIM_PWM_Stop+0x80>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e0ac      	b.n	8001be4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	f200 809f 	bhi.w	8001bd8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001a9a:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001ad5 	.word	0x08001ad5
 8001aa4:	08001bd9 	.word	0x08001bd9
 8001aa8:	08001bd9 	.word	0x08001bd9
 8001aac:	08001bd9 	.word	0x08001bd9
 8001ab0:	08001b15 	.word	0x08001b15
 8001ab4:	08001bd9 	.word	0x08001bd9
 8001ab8:	08001bd9 	.word	0x08001bd9
 8001abc:	08001bd9 	.word	0x08001bd9
 8001ac0:	08001b57 	.word	0x08001b57
 8001ac4:	08001bd9 	.word	0x08001bd9
 8001ac8:	08001bd9 	.word	0x08001bd9
 8001acc:	08001bd9 	.word	0x08001bd9
 8001ad0:	08001b97 	.word	0x08001b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f9a4 	bl	8001e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0208 	orr.w	r2, r2, #8
 8001aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0204 	bic.w	r2, r2, #4
 8001afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6999      	ldr	r1, [r3, #24]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	619a      	str	r2, [r3, #24]
      break;
 8001b12:	e062      	b.n	8001bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f9c0 	bl	8001ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699a      	ldr	r2, [r3, #24]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6999      	ldr	r1, [r3, #24]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	021a      	lsls	r2, r3, #8
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	619a      	str	r2, [r3, #24]
      break;
 8001b54:	e041      	b.n	8001bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f9dd 	bl	8001f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0208 	orr.w	r2, r2, #8
 8001b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0204 	bic.w	r2, r2, #4
 8001b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69d9      	ldr	r1, [r3, #28]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	61da      	str	r2, [r3, #28]
      break;
 8001b94:	e021      	b.n	8001bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 f9fa 	bl	8001f96 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69da      	ldr	r2, [r3, #28]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69d9      	ldr	r1, [r3, #28]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	021a      	lsls	r2, r3, #8
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	61da      	str	r2, [r3, #28]
      break;
 8001bd6:	e000      	b.n	8001bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001bd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_TIM_ConfigClockSource+0x18>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e0b3      	b.n	8001d6c <HAL_TIM_ConfigClockSource+0x180>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c3c:	d03e      	beq.n	8001cbc <HAL_TIM_ConfigClockSource+0xd0>
 8001c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c42:	f200 8087 	bhi.w	8001d54 <HAL_TIM_ConfigClockSource+0x168>
 8001c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4a:	f000 8085 	beq.w	8001d58 <HAL_TIM_ConfigClockSource+0x16c>
 8001c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c52:	d87f      	bhi.n	8001d54 <HAL_TIM_ConfigClockSource+0x168>
 8001c54:	2b70      	cmp	r3, #112	; 0x70
 8001c56:	d01a      	beq.n	8001c8e <HAL_TIM_ConfigClockSource+0xa2>
 8001c58:	2b70      	cmp	r3, #112	; 0x70
 8001c5a:	d87b      	bhi.n	8001d54 <HAL_TIM_ConfigClockSource+0x168>
 8001c5c:	2b60      	cmp	r3, #96	; 0x60
 8001c5e:	d050      	beq.n	8001d02 <HAL_TIM_ConfigClockSource+0x116>
 8001c60:	2b60      	cmp	r3, #96	; 0x60
 8001c62:	d877      	bhi.n	8001d54 <HAL_TIM_ConfigClockSource+0x168>
 8001c64:	2b50      	cmp	r3, #80	; 0x50
 8001c66:	d03c      	beq.n	8001ce2 <HAL_TIM_ConfigClockSource+0xf6>
 8001c68:	2b50      	cmp	r3, #80	; 0x50
 8001c6a:	d873      	bhi.n	8001d54 <HAL_TIM_ConfigClockSource+0x168>
 8001c6c:	2b40      	cmp	r3, #64	; 0x40
 8001c6e:	d058      	beq.n	8001d22 <HAL_TIM_ConfigClockSource+0x136>
 8001c70:	2b40      	cmp	r3, #64	; 0x40
 8001c72:	d86f      	bhi.n	8001d54 <HAL_TIM_ConfigClockSource+0x168>
 8001c74:	2b30      	cmp	r3, #48	; 0x30
 8001c76:	d064      	beq.n	8001d42 <HAL_TIM_ConfigClockSource+0x156>
 8001c78:	2b30      	cmp	r3, #48	; 0x30
 8001c7a:	d86b      	bhi.n	8001d54 <HAL_TIM_ConfigClockSource+0x168>
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d060      	beq.n	8001d42 <HAL_TIM_ConfigClockSource+0x156>
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d867      	bhi.n	8001d54 <HAL_TIM_ConfigClockSource+0x168>
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d05c      	beq.n	8001d42 <HAL_TIM_ConfigClockSource+0x156>
 8001c88:	2b10      	cmp	r3, #16
 8001c8a:	d05a      	beq.n	8001d42 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001c8c:	e062      	b.n	8001d54 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6899      	ldr	r1, [r3, #8]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f000 fa2f 	bl	8002100 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001cb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	609a      	str	r2, [r3, #8]
      break;
 8001cba:	e04e      	b.n	8001d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6899      	ldr	r1, [r3, #8]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f000 fa18 	bl	8002100 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cde:	609a      	str	r2, [r3, #8]
      break;
 8001ce0:	e03b      	b.n	8001d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6859      	ldr	r1, [r3, #4]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f000 f98f 	bl	8002012 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2150      	movs	r1, #80	; 0x50
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f9e6 	bl	80020cc <TIM_ITRx_SetConfig>
      break;
 8001d00:	e02b      	b.n	8001d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f000 f9ad 	bl	800206e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2160      	movs	r1, #96	; 0x60
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f9d6 	bl	80020cc <TIM_ITRx_SetConfig>
      break;
 8001d20:	e01b      	b.n	8001d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f000 f96f 	bl	8002012 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2140      	movs	r1, #64	; 0x40
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f9c6 	bl	80020cc <TIM_ITRx_SetConfig>
      break;
 8001d40:	e00b      	b.n	8001d5a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f000 f9bd 	bl	80020cc <TIM_ITRx_SetConfig>
        break;
 8001d52:	e002      	b.n	8001d5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001d54:	bf00      	nop
 8001d56:	e000      	b.n	8001d5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001d58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8a:	d00b      	beq.n	8001da4 <TIM_Base_SetConfig+0x30>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a23      	ldr	r2, [pc, #140]	; (8001e1c <TIM_Base_SetConfig+0xa8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <TIM_Base_SetConfig+0x30>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <TIM_Base_SetConfig+0xac>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d003      	beq.n	8001da4 <TIM_Base_SetConfig+0x30>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <TIM_Base_SetConfig+0xb0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d108      	bne.n	8001db6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbc:	d00b      	beq.n	8001dd6 <TIM_Base_SetConfig+0x62>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <TIM_Base_SetConfig+0xa8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <TIM_Base_SetConfig+0x62>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <TIM_Base_SetConfig+0xac>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d003      	beq.n	8001dd6 <TIM_Base_SetConfig+0x62>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <TIM_Base_SetConfig+0xb0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d108      	bne.n	8001de8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	615a      	str	r2, [r3, #20]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	40000800 	.word	0x40000800
 8001e24:	40000c00 	.word	0x40000c00

08001e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	f023 0201 	bic.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0303 	bic.w	r3, r3, #3
 8001e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f023 0302 	bic.w	r3, r3, #2
 8001e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	621a      	str	r2, [r3, #32]
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	f023 0210 	bic.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ece:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed6:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0320 	bic.w	r3, r3, #32
 8001eea:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	621a      	str	r2, [r3, #32]
}
 8001f12:	bf00      	nop
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f023 0303 	bic.w	r3, r3, #3
 8001f52:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f64:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	621a      	str	r2, [r3, #32]
}
 8001f8c:	bf00      	nop
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b087      	sub	sp, #28
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	031b      	lsls	r3, r3, #12
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	621a      	str	r2, [r3, #32]
}
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002012:	b480      	push	{r7}
 8002014:	b087      	sub	sp, #28
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f023 0201 	bic.w	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800203c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f023 030a 	bic.w	r3, r3, #10
 800204e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4313      	orrs	r3, r2
 8002056:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	621a      	str	r2, [r3, #32]
}
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800206e:	b480      	push	{r7}
 8002070:	b087      	sub	sp, #28
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	f023 0210 	bic.w	r2, r3, #16
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002098:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	031b      	lsls	r3, r3, #12
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	621a      	str	r2, [r3, #32]
}
 80020c2:	bf00      	nop
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f043 0307 	orr.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	609a      	str	r2, [r3, #8]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800211a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	021a      	lsls	r2, r3, #8
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	431a      	orrs	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4313      	orrs	r3, r2
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	609a      	str	r2, [r3, #8]
}
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800213e:	b480      	push	{r7}
 8002140:	b087      	sub	sp, #28
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2201      	movs	r2, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	43db      	mvns	r3, r3
 8002160:	401a      	ands	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a1a      	ldr	r2, [r3, #32]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	431a      	orrs	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	621a      	str	r2, [r3, #32]
}
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
	...

08002188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800219c:	2302      	movs	r3, #2
 800219e:	e046      	b.n	800222e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e2:	d00e      	beq.n	8002202 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a13      	ldr	r2, [pc, #76]	; (8002238 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d009      	beq.n	8002202 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d004      	beq.n	8002202 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a10      	ldr	r2, [pc, #64]	; (8002240 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d10c      	bne.n	800221c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	4313      	orrs	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800
 8002240:	40000c00 	.word	0x40000c00

08002244 <__libc_init_array>:
 8002244:	b570      	push	{r4, r5, r6, lr}
 8002246:	2600      	movs	r6, #0
 8002248:	4d0c      	ldr	r5, [pc, #48]	; (800227c <__libc_init_array+0x38>)
 800224a:	4c0d      	ldr	r4, [pc, #52]	; (8002280 <__libc_init_array+0x3c>)
 800224c:	1b64      	subs	r4, r4, r5
 800224e:	10a4      	asrs	r4, r4, #2
 8002250:	42a6      	cmp	r6, r4
 8002252:	d109      	bne.n	8002268 <__libc_init_array+0x24>
 8002254:	f000 f822 	bl	800229c <_init>
 8002258:	2600      	movs	r6, #0
 800225a:	4d0a      	ldr	r5, [pc, #40]	; (8002284 <__libc_init_array+0x40>)
 800225c:	4c0a      	ldr	r4, [pc, #40]	; (8002288 <__libc_init_array+0x44>)
 800225e:	1b64      	subs	r4, r4, r5
 8002260:	10a4      	asrs	r4, r4, #2
 8002262:	42a6      	cmp	r6, r4
 8002264:	d105      	bne.n	8002272 <__libc_init_array+0x2e>
 8002266:	bd70      	pop	{r4, r5, r6, pc}
 8002268:	f855 3b04 	ldr.w	r3, [r5], #4
 800226c:	4798      	blx	r3
 800226e:	3601      	adds	r6, #1
 8002270:	e7ee      	b.n	8002250 <__libc_init_array+0xc>
 8002272:	f855 3b04 	ldr.w	r3, [r5], #4
 8002276:	4798      	blx	r3
 8002278:	3601      	adds	r6, #1
 800227a:	e7f2      	b.n	8002262 <__libc_init_array+0x1e>
 800227c:	080022d4 	.word	0x080022d4
 8002280:	080022d4 	.word	0x080022d4
 8002284:	080022d4 	.word	0x080022d4
 8002288:	080022d8 	.word	0x080022d8

0800228c <memset>:
 800228c:	4603      	mov	r3, r0
 800228e:	4402      	add	r2, r0
 8002290:	4293      	cmp	r3, r2
 8002292:	d100      	bne.n	8002296 <memset+0xa>
 8002294:	4770      	bx	lr
 8002296:	f803 1b01 	strb.w	r1, [r3], #1
 800229a:	e7f9      	b.n	8002290 <memset+0x4>

0800229c <_init>:
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	bf00      	nop
 80022a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a2:	bc08      	pop	{r3}
 80022a4:	469e      	mov	lr, r3
 80022a6:	4770      	bx	lr

080022a8 <_fini>:
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	bf00      	nop
 80022ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ae:	bc08      	pop	{r3}
 80022b0:	469e      	mov	lr, r3
 80022b2:	4770      	bx	lr
